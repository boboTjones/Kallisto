# Autogenerated from a Treetop grammar. Edits may be lost.


require 'polyglot'
require 'treetop'

module LogLine
  include Treetop::Runtime

  def root
    @root ||= :timestamp
  end

  module Timestamp0
    def day
      elements[0]
    end

    def space1
      elements[1]
    end

    def month
      elements[2]
    end

    def space2
      elements[3]
    end

    def time
      elements[4]
    end
  end

  module Timestamp1
    def teststamp
      id = DateTime._parse(text_value).values.join
      "<div class=\"timestamp\" id=\"#{id}\">" + day.to_s + " " + month.to_s + " " + time.to_s + "</div>"
    end
  end

  def _nt_timestamp
    start_index = index
    if node_cache[:timestamp].has_key?(index)
      cached = node_cache[:timestamp][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_day
    s0 << r1
    if r1
      r2 = _nt_space
      s0 << r2
      if r2
        r3 = _nt_month
        s0 << r3
        if r3
          r4 = _nt_space
          s0 << r4
          if r4
            r5 = _nt_time
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Timestamp0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:timestamp][start_index] = r0

    r0
  end

  module Month0
    def to_s
      text_value
    end
  end

  def _nt_month
    start_index = index
    if node_cache[:month].has_key?(index)
      cached = node_cache[:month][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("Jan", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("Jan")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("Feb", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("Feb")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("Mar", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure("Mar")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("Apr", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure("Apr")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("May", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure("May")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("Jun", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure("Jun")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?("Jul", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure("Jul")
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?("Aug", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 3))
                    @index += 3
                  else
                    terminal_parse_failure("Aug")
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?("Sep", false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 3))
                      @index += 3
                    else
                      terminal_parse_failure("Sep")
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?("Oct", false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 3))
                        @index += 3
                      else
                        terminal_parse_failure("Oct")
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?("Nov", false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 3))
                          @index += 3
                        else
                          terminal_parse_failure("Nov")
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          if has_terminal?("Dec", false, index)
                            r12 = instantiate_node(SyntaxNode,input, index...(index + 3))
                            r12.extend(Month0)
                            @index += 3
                          else
                            terminal_parse_failure("Dec")
                            r12 = nil
                          end
                          if r12
                            r0 = r12
                          else
                            @index = i0
                            r0 = nil
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:month][start_index] = r0

    r0
  end

  module Day0
    def to_s
      text_value
    end
  end

  def _nt_day
    start_index = index
    if node_cache[:day].has_key?(index)
      cached = node_cache[:day][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("Sun", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure("Sun")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("Mon", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("Mon")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("Tue", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure("Tue")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("Wed", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
            @index += 3
          else
            terminal_parse_failure("Wed")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("Thu", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 3))
              @index += 3
            else
              terminal_parse_failure("Thu")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("Fri", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 3))
                @index += 3
              else
                terminal_parse_failure("Fri")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?("Sat", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  r7.extend(Day0)
                  @index += 3
                else
                  terminal_parse_failure("Sat")
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:day][start_index] = r0

    r0
  end

  module Time0
    def to_s
      text_value
    end
  end

  def _nt_time
    start_index = index
    if node_cache[:time].has_key?(index)
      cached = node_cache[:time][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[\\d.:\\d.:\\d.]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      r0.extend(Time0)
      @index += 1
    else
      r0 = nil
    end

    node_cache[:time][start_index] = r0

    r0
  end

  def _nt_hostname
    start_index = index
    if node_cache[:hostname].has_key?(index)
      cached = node_cache[:hostname][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 0))
      @index += 0
    else
      terminal_parse_failure("")
      r0 = nil
    end

    node_cache[:hostname][start_index] = r0

    r0
  end

  def _nt_process_name
    start_index = index
    if node_cache[:process_name].has_key?(index)
      cached = node_cache[:process_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 0))
      @index += 0
    else
      terminal_parse_failure("")
      r0 = nil
    end

    node_cache[:process_name][start_index] = r0

    r0
  end

  def _nt_pid
    start_index = index
    if node_cache[:pid].has_key?(index)
      cached = node_cache[:pid][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 0))
      @index += 0
    else
      terminal_parse_failure("")
      r0 = nil
    end

    node_cache[:pid][start_index] = r0

    r0
  end

  def _nt_message
    start_index = index
    if node_cache[:message].has_key?(index)
      cached = node_cache[:message][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 0))
      @index += 0
    else
      terminal_parse_failure("")
      r0 = nil
    end

    node_cache[:message][start_index] = r0

    r0
  end

  module ToHtml0
    def timestamp
      elements[0]
    end

    def hostname
      elements[1]
    end

    def processname
      elements[2]
    end

    def pid
      elements[3]
    end
  end

  def _nt_to_html
    start_index = index
    if node_cache[:to_html].has_key?(index)
      cached = node_cache[:to_html][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_timestamp
    s0 << r1
    if r1
      r2 = _nt_hostname
      s0 << r2
      if r2
        r3 = _nt_processname
        s0 << r3
        if r3
          r4 = _nt_pid
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ToHtml0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:to_html][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("\s", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("\s")
      r0 = nil
    end

    node_cache[:space][start_index] = r0

    r0
  end

  def _nt_LF
    start_index = index
    if node_cache[:LF].has_key?(index)
      cached = node_cache[:LF][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("\n", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("\n")
      r0 = nil
    end

    node_cache[:LF][start_index] = r0

    r0
  end

  def _nt_CR
    start_index = index
    if node_cache[:CR].has_key?(index)
      cached = node_cache[:CR][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("\r", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("\r")
      r0 = nil
    end

    node_cache[:CR][start_index] = r0

    r0
  end

  def _nt_CRLF
    start_index = index
    if node_cache[:CRLF].has_key?(index)
      cached = node_cache[:CRLF][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?("\r\n", false, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("\r\n")
      r0 = nil
    end

    node_cache[:CRLF][start_index] = r0

    r0
  end

end

class LogLineParser < Treetop::Runtime::CompiledParser
  include LogLine
end
